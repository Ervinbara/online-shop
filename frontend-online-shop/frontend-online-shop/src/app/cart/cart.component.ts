// cart.component.ts
import { Component, OnInit } from '@angular/core';
import { CartService } from '../services/cart.service';
import { CartItem } from '../../models/cart-item';
import { SharedCartService } from '../services/shared-cart.service';
import { CommandeService } from '../services/commande.service';
import { AuthService } from '../services/auth.service';
import { Order, OrderItem } from '../../models/order';

@Component({
  selector: 'app-cart',
  templateUrl: './cart.component.html',
  styleUrls: ['./cart.component.css']
})
export class CartComponent implements OnInit {
  cartItems: CartItem[] = [];
  cartItemCount: number = 0;

  constructor(
    private cartService: CartService,
    private sharedCartService: SharedCartService,
    private commandeService: CommandeService,
    private authService: AuthService
  ) { }

  ngOnInit(): void {
    this.sharedCartService.getCartItems().subscribe(cartItems => {
      this.cartItems = cartItems;
      this.updateCartItemCount();
    });

    this.sharedCartService.getCartItemCount().subscribe(count => {
      this.cartItemCount = count;
    });
  }

  removeFromCart(cartItem: CartItem): void {
    this.cartService.deleteCartItem(cartItem.id).subscribe(() => {
      this.sharedCartService.removeCartItem(cartItem.id);
    });
  }

  updateCartItem(cartItem: CartItem): void {
    this.cartService.addCartItem(cartItem).subscribe(() => {
      this.sharedCartService.updateCartItemQuantity(cartItem);
    });
  }

  updateCartItemCount(): void {
    this.cartItemCount = this.cartItems.reduce((total, item) => total + item.quantity, 0);
  }

  createOrder(): void {
    const currentUser = this.authService.getCurrentUser();
    if (!currentUser) {
      console.error('User not logged in');
      return;
    }

    const order: Order = {
      id: 0,  // ID will be generated by the backend
      userId: currentUser.id,
      createdAt: new Date().toISOString(),
      orderItems: this.cartItems.map(item => ({
        productId: item.product.id,
        quantity: item.quantity,
        price: item.product.price
      })),
      totalPrice: this.cartItems.reduce((total, item) => total + (item.product.price * item.quantity), 0)
    };

    this.commandeService.createOrder(order).subscribe(createdOrder => {
      console.log('Order created:', createdOrder);
      this.sharedCartService.clearCart();
    });
  }
}
